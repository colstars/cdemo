<?xml version="1.0" encoding="UTF-8"?>

<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<property resource="logback.properties"/>

	<!-- 动态日志级别 -->
	<jmxConfigurator />

	<property name="console" value=" %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] - %msg%n" />
	<property name="pattern" value="LOGBACK %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %replace(%caller{1}){'\t|Caller.{1}0|\r\n', ''} - %msg%n" />

	<!-- 定义日志文件 输出位置 -->
	<property name="LOG_HOME" value="E:/logs/cdemo" />
	<property name="LOG_HOME_COMMON" value="${LOG_HOME}/common" />
	<property name="LOG_HOME_SERVICE" value="${LOG_HOME}/service" />
	<property name="LOG_HOME_TEST" value="${LOG_HOME}/test" />
	<property name="LOG_HOME_DEMO" value="${LOG_HOME}/demo" />

	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				<!-- 设置日志输出格式 -->
				<!--${console}-->
				${pattern}
				<!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n -->
				<!-- LOGBACK %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %replace(%caller{1}){'\t|Caller.{1}0|\r\n', ''} - %msg%n -->
				<!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{0}[%file:%method:%line] - %msg%n -->
			</pattern>
		</encoder>
	</appender>

	<appender name="commonRolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME_COMMON}/common.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME_COMMON}/common-%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<MaxFileSize>1MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>
				<!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %caller{0} - %msg%n -->
				${pattern}
			</pattern>
			<!-- <immediateFlush>true</immediateFlush> -->
		</encoder>
	</appender>

	<appender name="serviceRolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME_SERVICE}/service.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME_SERVICE}/service-%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<MaxFileSize>1MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>
				<!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %caller{0} - %msg%n -->
				${pattern}
			</pattern>
			<!-- <immediateFlush>true</immediateFlush> -->
		</encoder>
	</appender>

	<appender name="testRolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME_TEST}/test.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME_TEST}/test-%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<MaxFileSize>1MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>
				<!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %caller{0} - %msg%n -->
				${pattern}
			</pattern>
			<!-- <immediateFlush>true</immediateFlush> -->
		</encoder>
	</appender>

	<appender name="demoRolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME_DEMO}/demo.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME_DEMO}/demo-%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<MaxFileSize>1MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>
				<!-- %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %caller{0} - %msg%n -->
				${pattern}
			</pattern>
			<!-- <immediateFlush>true</immediateFlush> -->
		</encoder>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录WARN级别的日志 -->
		<!-- 如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>ERROR</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>
				${LOG_HOME}/error/%d{yyyy-MM-dd}/error-log.log
			</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>
				<!-- 设置日志输出格式 -->
				${pattern}
			</pattern>
		</encoder>
	</appender>

	<logger name="com.cdemo.util" level="INFO">
		<appender-ref ref="commonRolling" />
	</logger>
	<logger name="com.cdemo.service" level="INFO">
		<appender-ref ref="serviceRolling" />
	</logger>
	<logger name="com.cdemo.demo" level="INFO">
		<appender-ref ref="demoRolling" />
	</logger>

	<!-- 异步输出 -->
	<appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="commonRolling"/>
	</appender>

	<appender name="ASYNC-ERROR" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ERROR"/>
	</appender>

	<!-- root级别 DEBUG -->
	<root level="INFO">
		<!-- 控制台输出 -->
		<appender-ref ref="console" />
		<appender-ref ref="commonRolling" />
		<appender-ref ref="ERROR" />

	</root>

</configuration>